import java.util.function.Predicate

/*
 * Copyright (c) 2018-2020 Karlatemp. All rights reserved.
 * @author Karlatemp <karlatemp@vip.qq.com> <https://github.com/Karlatemp>
 * @create 2020/08/03 13:08:31
 *
 * kar-framework/kar-framework/build.gradle
 */

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}


allprojects {
    group 'io.github.karlatemp.kar-framework'
    version '1.1.0'
}
allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = 'SpigotMC'
            url = 'https://hub.spigotmc.org/nexus/content/groups/public/'
        }
        maven {
            name = 'CodeMC - NMS'
            url = 'https://repo.codemc.io/repository/nms/'
        }
    }
}
subprojects {
    afterEvaluate {
        dependencies {
            testCompile group: 'junit', name: 'junit', version: '4.12'
            def configurationVersion = '3.6.1'
            // https://mvnrepository.com/artifact/org.jetbrains/annotations
            compile group: 'org.jetbrains', name: 'annotations', version: '19.0.0'
            compile 'commons-lang:commons-lang:2.6'
            compile "org.spongepowered:configurate-hocon:$configurationVersion"
            compile "org.spongepowered:configurate-gson:$configurationVersion"
            compile "org.spongepowered:configurate-yaml:$configurationVersion"
            if (project.name.startsWith("spigot-nms")) {
                compile project(':spigot')
            }
        }
    }
}

afterEvaluate {
    dependencies {
        rootProject.subprojects.each { proj ->
            implementation proj
        }
    }
}

shadowJar {
    classifier = ""
    dependencyFilter.exclude { dep ->
        switch (dep.moduleGroup) {
            case "net.md-5":
            case "commons-lang":
            case "io.netty":
            case "org.spigotmc":
                return true
        }
        switch (dep.moduleGroup + ':' + dep.moduleName) {
            case "com.google.code.gson:gson":
            case "com.google.guava:guava":
            case "com.googlecode.json-simple:json-simple":
            case "junit:junit":
            case "org.hamcrest:hamcrest-core":
            case "se.llbit:jo-nbt":
            case "net.sf.trove4j:core":
                return true
        }
        println('-> ' + dep.moduleGroup + ':' + dep.moduleName)
        return false
    }
}

jar {
    enabled = false
}

({
    def mkpom = new File("G:\\KarlatempRepo\\mkpom.gradle")
    if (mkpom.isFile()) {
        extensions.add("pomFilter", { dep ->
            if (dep.group == "org.spigotmc" || dep.group == "net.md-5") {
                return false
            }
            return true
        } as Predicate<Dependency>)
        apply from: mkpom
        def t = tasks.getByName("publishToMavenLocal")
        t.dependsOn("shadowJar")
    }
})()

