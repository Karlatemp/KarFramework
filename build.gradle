import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

import java.util.function.Predicate
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

/*
 * Copyright (c) 2018-2020 Karlatemp. All rights reserved.
 * @author Karlatemp <karlatemp@vip.qq.com> <https://github.com/Karlatemp>
 * @create 2020/08/03 13:08:31
 *
 * kar-framework/kar-framework/build.gradle
 */

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

allprojects {
    group 'io.github.karlatemp.kar-framework'
    version '1.4.1'
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = 'SpigotMC'
            url = 'https://hub.spigotmc.org/nexus/content/groups/public/'
        }
        maven {
            name = 'CodeMC - NMS'
            url = 'https://repo.codemc.io/repository/nms/'
        }
    }
}

subprojects {
    afterEvaluate {
        dependencies {
            testCompile group: 'junit', name: 'junit', version: '4.12'
            def configurationVersion = '3.6.1'
            // https://mvnrepository.com/artifact/org.jetbrains/annotations
            compile group: 'org.jetbrains', name: 'annotations', version: '19.0.0'
            compile 'commons-lang:commons-lang:2.6'
            compile "org.spongepowered:configurate-hocon:$configurationVersion"
            compile "org.spongepowered:configurate-gson:$configurationVersion"
            compile "org.spongepowered:configurate-yaml:$configurationVersion"

            compile rootProject.fileTree('libs')


            def gversion = '3.0.5'
            def igroovy = { vec ->
                if (vec == '') {
                    return "org.codehaus.groovy:groovy:${gversion}"
                }
                return "org.codehaus.groovy:groovy-${vec}:${gversion}"
            }
            compile igroovy('')
            compile igroovy('astbuilder')
            compile igroovy('datetime')
            compile igroovy('json')
            compile igroovy('jsr223')
            compile igroovy('macro')
            compile igroovy('nio')
            compile igroovy('sql')
            compile igroovy('xml')
            compile igroovy('templates')

            if (project.name.startsWith("spigot-nms")) {
                compile project(':spigot')
            }
        }
    }
}

afterEvaluate {
    dependencies {
        rootProject.subprojects.each { proj ->
            if (proj.name != 'groovy') {
                implementation proj
            }
        }
    }
}

shadowJar {
    classifier("release")
    dependencyFilter.exclude { dep ->
        switch (dep.moduleGroup) {
            case "net.md-5":
            case "commons-lang":
            case "io.netty":
            case "org.spigotmc":
                return true
        }
        switch (dep.moduleGroup + ':' + dep.moduleName) {
            case "com.google.code.gson:gson":
            case "com.google.guava:guava":
            case "com.googlecode.json-simple:json-simple":
            case "junit:junit":
            case "org.hamcrest:hamcrest-core":
            case "se.llbit:jo-nbt":
            case "net.sf.trove4j:core":
                return true
        }
        println('-> ' + dep.moduleGroup + ':' + dep.moduleName)
        return false
    }
    relocate 'cn.mcres.karlatemp.unsafe', 'io.github.karlatemp.karframework.unsafe'
    relocate 'cn.mcres.karlatemp.mxlib.Java9ToJava8', 'io.github.karlatemp.karframework.internal.j9to8'

}

({
    def task = tasks.create("shadowReleaseJar", ShadowJar.class)
    task.classifier("")
    task.configurations.add(project.configurations.getByName('runtimeClasspath'))
    task.dependencyFilter.exclude {
        return it.moduleGroup != project.group.toString()
    }
    task.relocate 'cn.mcres.karlatemp.unsafe', 'io.github.karlatemp.karframework.unsafe'
    task.relocate 'cn.mcres.karlatemp.mxlib.Java9ToJava8', 'io.github.karlatemp.karframework.internal.j9to8'
})()

task rebuildAll(dependsOn: ['clean', 'shadowJar', 'shadowReleaseJar'])

jar {
    enabled = false
}

({
    def mkpom = new File("G:\\KarlatempRepo\\mkpom.gradle")
    if (mkpom.isFile()) {
        extensions.add("pomFilter", { dep ->
            if (dep.group == "org.spigotmc" || dep.group == "net.md-5") {
                return false
            }
            return true
        } as Predicate<Dependency>)
        apply from: mkpom
        def t = tasks.getByName('publishToMavenLocal')
        t.dependsOn('shadowJar', 'shadowReleaseJar')
    }
})()

task packingGroovy() {
    doFirst {
        def files = rootProject.file('groovy/src/main/groovy')
        def outX = rootProject.file('common/src/main/resources/karframework')
        def output = new File(outX, 'groovy.zip')
        output.parentFile.mkdirs()
        def out = new ZipOutputStream(new FileOutputStream(output))
        def walk = new Object() {
            LinkedList<String> path = new LinkedList<>()

            def view(File file) {
                path.addLast(file.name)
                if (file.isDirectory()) {
                    out.putNextEntry(new ZipEntry(
                            String.join('/', path) + '/'
                    ))
                    File[] files0 = file.listFiles()
                    if (files0 != null) {
                        files0.each { view(it) }
                    }
                } else if (file.isFile()) {
                    out.putNextEntry(new ZipEntry(
                            String.join('/', path)
                    ))
                    file.withInputStream { inp ->
                        byte[] buffer = new byte[1024]
                        while (true) {
                            def length = inp.read(buffer)
                            if (length == -1) break
                            out.write(buffer, 0, length)
                        }
                    }
                }
                path.removeLast()
            }
        }
        files.listFiles().each { walk.view(it) }
        out.close()
        new File(outX, 'groovy.txt').write(System.currentTimeMillis().toString())
    }
}
